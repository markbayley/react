{"version":3,"sources":["web3.js","lottery.js","App.js","serviceWorker.js","index.js"],"names":["web3","Web3","window","currentProvider","eth","Contract","App","state","manager","players","balance","value","message","onSubmit","event","a","preventDefault","getAccounts","accounts","setState","lottery","methods","enter","send","from","utils","toWei","onClick","pickWinner","call","getPlayers","getBalance","options","address","this","class","length","fromWei","onChange","target","placeholder","href","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbe6183c.chunk.js","sourcesContent":["import Web3 from 'web3';\r\n\r\nconst web3 = new Web3(window.web3.currentProvider);\r\n\r\nexport default web3;","import web3 from './web3';\r\n\r\nconst address = '0xa9E74aF5a81ceFc308f83BD32058B516999D9762';\r\n\r\nconst abi = \r\n[{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\r\n\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":\r\nfalse,\"inputs\":[],\"name\":\"pickWinner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\r\n\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\r\n\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\r\n\"name\":\"enter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},\r\n{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\r\n\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\r\n\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}];\r\n\r\nexport default new web3.eth.Contract(abi, address);","import React, {Component} from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport web3 from './web3';\nimport lottery from './lottery';\n\nclass App extends Component {\n  state = {\n    manager: '',\n    players: [],\n    balance: '',\n    value: '',\n    message: ''\n  };\n\n  /*constructor(props) {\n    super(props);\n\n    this.state = { manager: '' };\n  }*/\n\n  async componentDidMount() {\n    const manager = await lottery.methods.manager().call();\n    const players = await lottery.methods.getPlayers().call();\n    const balance = await web3.eth.getBalance(lottery.options.address);\n\n    this.setState({ manager, players, balance });\n  }\n\n  \n  onSubmit = async (event) => {\n      event.preventDefault();\n\n      const accounts = await web3.eth.getAccounts();\n\n      this.setState({ message: 'Waiting on transaction success...' });\n\n      await lottery.methods.enter().send({\n          from: accounts[0],\n          value: web3.utils.toWei(this.state.value, 'ether')\n      });\n\n      this.setState({ message: 'You have been entered!' });\n  };\n\n  onClick = async (event) => {\n      const accounts = await web3.eth.getAccounts();\n\n      this.setState({ message: 'Waiting on transaction...' });\n\n      await lottery.methods.pickWinner().send({\n          from: accounts[0]\n      });\n\n      this.setState({ message: 'A winner has been picked!' });\n  };\n\n\n  render() {\n\n  return (\n    <div class=\"module\">\n        <h1>Block Lotto</h1>\n        <hr />\n        <h4>\n        There are currently <div class=\"numberCircle\">{this.state.players.length}</div>people entered \n        competing to win <div class=\"numberBox\"> {web3.utils.fromWei(this.state.balance, 'ether')} </div> Ether!\n        </h4>\n\n        \n\n        <form onSubmit={this.onSubmit}>\n           <h4>Try Your Luck!</h4>\n           <div>\n              <label></label>\n              <input \n              \n                 value={this.state.value}\n                 onChange={event => this.setState({ value: event.target.value })}\n                 placeholder=\" Enter amount of Ether...\"\n              />\n              <br></br>\n               <button class=\"btn\">Play</button>\n           </div>\n           <br></br>\n          \n        </form>\n\n      \n\n        <h1>{this.state.message}</h1>\n\n        <h4>Ok, time to pick a winner!</h4>\n        <button class=\"btn\" onClick={this.onClick}>Pick a winner!</button>\n\n        <hr />\n        Contract Manager: <a href=\"https://rinkeby.etherscan.io/address/0xAf52D0807faBb16e5229D2dB7042B3862889FA82\"><strong>{this.state.manager}</strong></a>.<br></br><br></br>\n        Please Note: You must have MetaMask installed to play.\n\n\n    </div>\n  );\n }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","//import React from 'react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}